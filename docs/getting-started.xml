<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section id="gtu-Getting-Started">
  <sectioninfo>
    <title role="top_of_page" id="gtu-Getting-Started.top_of_page">Getting Started</title>
  </sectioninfo>

  <section>
    <title>Adding GTU to your project</title>

    <para>
      GTU is designed to be included in-tree and integrate with autotools.
      Assuming unit tests are to be kept in a <filename>tests/</filename>
      directory, getting GTU set up might look something like the following:
    </para>

    <procedure>
      <title>Towards testing</title>

      <step>
        <para>
          Set up the tree:
        </para>

        <literallayout>    <userinput>mkdir tests</userinput>
    <userinput>touch tests/Makefile.am</userinput>
    <userinput>git submodule add https://github.com/Bob131/giitestutils tests/utils</userinput>
    <userinput>cp tests/utils/gtu_tests.m4 m4</userinput>
    <userinput>cp tests/utils/gtu.mk build-aux</userinput>
        </literallayout>
      </step>

      <step>
        <para>
          To initialise GTU's build system, add the following to your
          <filename>configure.ac</filename>:
        </para>

        <informalexample>
          <programlisting language="autoconf">GTU_TESTS([tests/utils])</programlisting>
        </informalexample>

        <note>
          For more information, see the documentation in
          <filename>gtu_tests.m4</filename>.
        </note>
      </step>

      <step>
        <para>
          Fill your tests Makefile.
        </para>

        <example>
          <title>An example <filename>tests/Makefile.am</filename></title>
          <programlisting language="automake">
            if ENABLE_GTU_TESTS
            SUBDIRS = utils
            include $(top_srcdir)/build-aux/gtu.mk

            test_programs = tests

            tests_SOURCES = \
                    tests.vala

            tests_VALAFLAGS = \
                    $(gtu_U_VALAFLAGS)

            tests_CFLAGS = \
                    $(gtu_U_CFLAGS)

            tests_LDADD = \
                    $(gtu_U_LIBS)
            endif</programlisting>
        </example>
      </step>
    </procedure>


    <para>
      After this, you should have:
    </para>

    <itemizedlist>
      <listitem>
        A new <option>--enable-tests</option> flag in your project's
        configure script. If a user omits this flag from a
        <command>configure</command> invocation, they shouldn't need the GTU
        submodule to be checked out for a successful build.
      </listitem>

      <listitem>
        GLib's TAP testing facilities.
      </listitem>
    </itemizedlist>

    <para>
      Running <userinput>make check</userinput> now has a few extra behaviours:
    </para>

    <itemizedlist>
      <listitem>
        Builds a static library, <filename>libgtu.a</filename>.
      </listitem>

      <listitem>
        Builds a test suite binary, <filename>tests/tests</filename>, statically
        linked with GTU.
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Testing your project</title>

    <para>
      There are several important pieces to GTU:
    </para>

    <itemizedlist>
      <listitem>
        #GtuTestObject is a generic test container. It's a reference-counted
        object that carries one or more test case implementations, metadata
        about those tests and manages the life cycle of whatever test-related
        data your test suite needs. There are two types of test object:

        <itemizedlist>
          <listitem>
            <para>
              #GtuTestCase contains the implementation of a single test case,
              as provided by your project's test suite. Depending on your
              taste, you can either pass your test case function to
              gtu_test_case_new() or create a new subclass and override the
              #GtuTestCaseClass.test_impl() virtual method.
            </para>
          </listitem>

          <listitem>
            <para>
              #GtuTestSuite allows you to organise collections of related test
              cases, describe dependent relationships between them, and
              provides the mechanism for executing the test cases you've
              supplied. Test case scheduling, memory management and
              communication with the test harness are all managed by this
              object.
            </para>

            <para>
              Test suites may be subclassed to provide reusable template suites
              within your project.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          Every test object is identified by a unique #GtuPath, which is
          written to the test log alongside the result of each test.
        </para>
      </listitem>

      <listitem>
        <para>
          A test case that runs to completion is considered to have passed
          successfully. Test cases can be failed or skipped by aborting the
          test mid-execution, using the
          <link linkend="gtu-Asserts">assert</link>
          or
          <link linkend="gtu-Skips">skip</link>
          APIs. When a test is aborted, execution automatically returns to the
          test execution loop; you should ensure that any memory allocated for
          a test is managed by its #GtuTestCase instance to prevent memory
          leaks.
        </para>
      </listitem>
    </itemizedlist>

    <example>
      <title>Writing a test suite in C</title>
      <programlisting language="c">
        #include &lt;gtu.h&gt;

        struct MyObject {
          int some_field;
        };

        static void test_field_value (struct MyObject *object) {
          gtu_assert (object != NULL &amp;&amp; object->some_field == 42);
        }

        int main (int argc, char *argv[]) {
          gtu_init (argv, argc);
          GtuTestSuite *root_suite = gtu_test_suite_new ("my-project");
          GtuTestSuite *object_suite = gtu_test_suite_new ("my-object");

          MyObject* object = g_malloc (sizeof (MyObject));
          object->some_field = 42;
          GtuTestCase* field_test =
            gtu_test_case_new ("field",
                               (GtuTestCaseFunc) &amp;test_field_value,
                               object,
                               (GDestroyNotify) g_free);

          gtu_test_suite_add_obj (object_suite, field_test);
          gtu_test_suite_add_obj (root_suite, object_suite);

          return gtu_test_suite_run (root_suite);
        }
      </programlisting>
    </example>

    <example>
      <title>Writing a test suite in Vala</title>
      <programlisting language="vala">
        class MyObject {
          public int some_field;
        }

        class MyObjectTestSuite : Gtu.TestSuite {
          class FieldTest : Gtu.TestCase {
            public MyObject object;

            protected override void test_impl () {
              object = new MyObject ();
              object.some_field = 42;

              assert (object.some_field == 42);
            }

            public FieldTest () {
              base.@construct ("field");
            }
          }

          public MyObjectTestSuite () {
            base ("my-object");
            this.add (new FieldTest ());
          }
        }

        class RootTestSuite : Gtu.TestSuite {
          RootTestSuite () {
            base ("my-project");
            this.add (new MyObjectTestSuite ());
          }

          static int main (string[] args) {
            Gtu.init (args);
            var suite = new RootTestSuite ();
            return suite.run ();
          }
        }
      </programlisting>
    </example>
  </section>
</section>
